{
	"info": {
		"_postman_id": "e7f64975-faea-4221-ab8b-ed1fe629b4f7",
		"name": "Atlas Citation - Portal",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19713790"
	},
	"item": [
		{
			"name": "Sprint 1",
			"item": [
				{
					"name": "AB-4960 - View List of folder contents",
					"item": [
						{
							"name": "List of folders content - 400 not valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folders?parentId=532C4EAA-D706--B805-F942BC7B20B1",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									],
									"query": [
										{
											"key": "parentId",
											"value": "532C4EAA-D706--B805-F942BC7B20B1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List of folders content - byParentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//verifies correct code is returned\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"The response has all properties\", () => {\r",
											"    //parse the response JSON and test  properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.parentId).to.eql('532c4eaa-d706-4068-b805-f942bc7b20d1');\r",
											"    pm.expect(responseJson.name).to.be.a('string');\r",
											"    pm.expect(responseJson.id).to.eql('532c4eaa-d706-4068-b805-f942bc7b20e1');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folders?parentId=532c4eaa-d706-4068-b805-f942bc7b20d1",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									],
									"query": [
										{
											"key": "parentId",
											"value": "532c4eaa-d706-4068-b805-f942bc7b20d1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List of folders content - 200 success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//verifies correct code is returned\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folders",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"response": []
						},
						{
							"name": "List of folders content - Happy flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parentIdIsDefined = (folders) => {\r",
											"    return folders.parentId !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Folders should have an parentId\", function(){\r",
											"    const folders = pm.response.json();\r",
											"    pm.expect(folders.every(parentIdIsDefined)).to.be.true;\r",
											"});\r",
											"\r",
											"const nameIsDefined = (folders) => {\r",
											"    return folders.name !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Folders should have an name\", function(){\r",
											"    const folders = pm.response.json();\r",
											"    pm.expect(folders.every(nameIsDefined)).to.be.true;\r",
											"});\r",
											"\r",
											"const idIsDefined = (folders) => {\r",
											"    return folders.id !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Folders should have an id\", function(){\r",
											"    const folders = pm.response.json();\r",
											"    pm.expect(folders.every(idIsDefined)).to.be.true;\r",
											"});\r",
											"\r",
											"const createdByIsDefined = (folders) => {\r",
											"    return folders.createdBy !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Folders should have an createdBy\", function(){\r",
											"    const folders = pm.response.json();\r",
											"    pm.expect(folders.every(createdByIsDefined)).to.be.true;\r",
											"});\r",
											"\r",
											"const createdDateIsDefined = (folders) => {\r",
											"    return folders.createdDate !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Folders should have an createdDate\", function(){\r",
											"    const folders = pm.response.json();\r",
											"    pm.expect(folders.every(createdDateIsDefined)).to.be.true;\r",
											"});\r",
											"\r",
											"const updatedByIsDefined = (folders) => {\r",
											"    return folders.updatedBy !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Folders should have an updatedBy\", function(){\r",
											"    const folders = pm.response.json();\r",
											"    pm.expect(folders.every(updatedByIsDefined)).to.be.true;\r",
											"});\r",
											"\r",
											"const updatedDateIsDefined = (folders) => {\r",
											"    return folders.updatedDate !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Folders should have an updatedDate\", function(){\r",
											"    const folders = pm.response.json();\r",
											"    pm.expect(folders.every(updatedDateIsDefined)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folders",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"response": []
						},
						{
							"name": "List of folders content - 404 bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//verifies 404 not found code is returned\r",
											"pm.test(\"Status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folder",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folder"
									]
								}
							},
							"response": []
						},
						{
							"name": "List of folders content - 500 Server error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//verifies 500 server error code is returned\r",
											"pm.test(\"Status code is 500\", function(){\r",
											"    pm.response.to.have.status(500)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folders",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AB-4961 - Open folder",
					"item": [
						{
							"name": "Open folder - success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies correct code is returned\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folders/532C4EAA-D706-4068-B805-F942BC7B2002/breadcrumbs",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"532C4EAA-D706-4068-B805-F942BC7B2002",
										"breadcrumbs"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Open folder -  Happy flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parentIdIsDefined = (breadcrumbs) => {\r",
											"    return breadcrumbs.parentId !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Folders should have an parentId\", function(){\r",
											"    const breadcrumbs = pm.response.json();\r",
											"    pm.expect(breadcrumbs.every(parentIdIsDefined)).to.be.true;\r",
											"});\r",
											"\r",
											"const nameIsDefined = (breadcrumbs) => {\r",
											"    return breadcrumbs.name !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Folders should have an name\", function(){\r",
											"    const breadcrumbs = pm.response.json();\r",
											"    pm.expect(breadcrumbs.every(nameIsDefined)).to.be.true;\r",
											"});\r",
											"\r",
											"const idIsDefined = (breadcrumbs) => {\r",
											"    return breadcrumbs.id !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Folders should have an id\", function(){\r",
											"    const breadcrumbs = pm.response.json();\r",
											"    pm.expect(breadcrumbs.every(idIsDefined)).to.be.true;\r",
											"});\r",
											"\r",
											"const createdByIsDefined = (breadcrumbs) => {\r",
											"    return breadcrumbs.createdBy !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Folders should have an createdBy\", function(){\r",
											"    const breadcrumbs = pm.response.json();\r",
											"    pm.expect(breadcrumbs.every(createdByIsDefined)).to.be.true;\r",
											"});\r",
											"\r",
											"const createdDateIsDefined = (breadcrumbs) => {\r",
											"    return breadcrumbs.createdDate !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Folders should have an createdDate\", function(){\r",
											"    const breadcrumbs = pm.response.json();\r",
											"    pm.expect(breadcrumbs.every(createdDateIsDefined)).to.be.true;\r",
											"});\r",
											"\r",
											"const updatedByIsDefined = (breadcrumbs) => {\r",
											"    return breadcrumbs.updatedBy !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Folders should have an updatedBy\", function(){\r",
											"    const breadcrumbs = pm.response.json();\r",
											"    pm.expect(breadcrumbs.every(updatedByIsDefined)).to.be.true;\r",
											"});\r",
											"\r",
											"const updatedDateIsDefined = (breadcrumbs) => {\r",
											"    return breadcrumbs.updatedDate !== undefined;\r",
											"}\r",
											"\r",
											"pm.test(\"Folders should have an updatedDate\", function(){\r",
											"    const breadcrumbs = pm.response.json();\r",
											"    pm.expect(breadcrumbs.every(updatedDateIsDefined)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folders/532C4EAA-D706-4068-B805-F942BC7B2002/breadcrumbs",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"532C4EAA-D706-4068-B805-F942BC7B2002",
										"breadcrumbs"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Open folder - 404 bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 404 not found code is returned\r",
											"pm.test(\"Status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folders/{{folderId}}/breadcrumb",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"{{folderId}}",
										"breadcrumb"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Open folder - 500 Server Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 500 server error code is returned\r",
											"pm.test(\"Status code is 500\", function(){\r",
											"    pm.response.to.have.status(500)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folders/{{folderId}}/breadcrumb",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"{{folderId}}",
										"breadcrumb"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AB-4958 - Create folder",
					"item": [
						{
							"name": "Create folders - 200 success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies correct code is returned\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parentId\": \"532C4EAA-D706-4068-B805-F942BC7B2002\",\r\n  \"name\": \"A22\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create folders - Check attributes -200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"parentId: !null\", function(){\r",
											"    pm.expect(responseBody.parentId).to.not.be.null;\r",
											"    pm.expect(responseBody.parentId).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"name: !null\", function(){\r",
											"    pm.expect(responseBody.name).to.not.be.null;\r",
											"    pm.expect(responseBody.name).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"id: !null\", function(){\r",
											"    pm.expect(responseBody.id).to.not.be.null;\r",
											"    pm.expect(responseBody.id).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"createdBy: !null\", function(){\r",
											"    pm.expect(responseBody.createdBy).to.not.be.null;\r",
											"    pm.expect(responseBody.createdBy).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"createdDate: !null\", function(){\r",
											"    pm.expect(responseBody.createdDate).to.not.be.null;\r",
											"    pm.expect(responseBody.createdDate).to.have.lengthOf.above(0);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parentId\": \"532C4EAA-D706-4068-B805-F942BC7B2002\",\r\n  \"name\": \"Success5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create folders - 500 Server error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 500 server error code is returned\r",
											"pm.test(\"Status code is 500\", function(){\r",
											"    pm.response.to.have.status(500)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parentId\": \"532C4EAA-D706-4068-B805-F942BC7B2002\",\r\n  \"name\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create folders - Invalid parentId -400 Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parentId\": \"3fa85f64-5717-4562-b3fc-\",\r\n  \"name\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create folders - Invalid folder name -400 Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parentId\": \"532C4EAA-D706-4068-B805-F942BC7B20D1\",\r\n  \"name\": \"test-,@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create folders - Invalid Folder Name Length -400 Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parentId\": \"532C4EAA-D706-4068-B805-F942BC7B20D1\",\r\n  \"name\": \"lzqtEZVyKNLqMhracncJiqtuZBHuuRTMPVPplenKrHbpOYZYMaSlUauqqUNLttqFoxxAmjjwuCLmdhAxeomUerFQcnEOhMOmCpNwceWeUWosnFkQmYOrdeJrTNYOeuFMyVfgjwkcOfIkErLHsBtLzCQZCowbVaAkSymGQuvrppLGoRIMNNTQJArraUFygVPOSEyMfkwhiCovTrFIhkTLXXSrQxeAIwYDiqqKjLUIMVinTEPb\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create folders - Invalid  Length -400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parentId\": \"532C4EAA-D706-4068-B805-F942BC7B20D1\",\r\n  \"name\": \"bxLJdAxvmzVIWIFsGOHOzBboTKfoNNeIbKiSgOvwLHHZIGrAWdVSevblMciQMAOegVtNZDmBiAhaojLcNRcOgEILqiLtvKNJOEVWAUnKHjQTzkQzCRQHAfyeooFTbehss\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create folders - parentId and name empty - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parentId\": \"\",\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create folders - Folder name already exist -400 Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parentId\": \"532C4EAA-D706-4068-B805-F942BC7B2002\",\r\n  \"name\": \"A11\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create folders - 404 not  found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//verifies 404 not found code is returned\r",
											"pm.test(\"Status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"parentId\": \"532C4EAA-D706-4068-B805-F942BC7B200a\",\r\n  \"name\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Sprint 3",
			"item": [
				{
					"name": "AB-4983- Delete folder",
					"item": [
						{
							"name": "Delete folder - 204 success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies correct code is returned\r",
											"pm.test(\"Status code is 204\", function(){\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folders/9314B068-95AC-4DC3-26B5-08DA63217B54",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"9314B068-95AC-4DC3-26B5-08DA63217B54"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete folder - 404 Folder not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 404 not found code is returned\r",
											"pm.test(\"Status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folders/832D1499-DFDA-4DF1-3527-08DA58171B92",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"832D1499-DFDA-4DF1-3527-08DA58171B92"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete folder - 400 Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 404 not found code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folders/0E50C90D-931C-4D53-351F-08DA58171B92",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"0E50C90D-931C-4D53-351F-08DA58171B92"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete folder - 500 Internal server error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 500 not found code is returned\r",
											"pm.test(\"Status code is 500\", function(){\r",
											"    pm.response.to.have.status(500)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folders/0E50C90D-931C-4D53-351F-08DA58171B92",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"0E50C90D-931C-4D53-351F-08DA58171B92"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete folder - Invalid Id - 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 404 not found code is returned\r",
											"pm.test(\"Status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/folders/0E50C90D-931C-4D53--08DA58171B92",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"0E50C90D-931C-4D53--08DA58171B92"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AB-5009 - Rename Folder",
					"item": [
						{
							"name": "Update folder - 200 success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies correct code is returned\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"DANA-8\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders/77ab2c46acaa4da359da08da63e60401",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"77ab2c46acaa4da359da08da63e60401"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update folder - 200 success -output fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"name: !null\", function(){\r",
											"    pm.expect(responseBody.name).to.not.be.null;\r",
											"    pm.expect(responseBody.name).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"id: !null\", function(){\r",
											"    pm.expect(responseBody.id).to.not.be.null;\r",
											"    pm.expect(responseBody.id).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"createdBy: !null\", function(){\r",
											"    pm.expect(responseBody.createdBy).to.not.be.null;\r",
											"    pm.expect(responseBody.createdBy).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"createdDate: !null\", function(){\r",
											"    pm.expect(responseBody.createdDate).to.not.be.null;\r",
											"    pm.expect(responseBody.createdDate).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"updatedBy: !null\", function(){\r",
											"    pm.expect(responseBody.updatedBy).to.not.be.null;\r",
											"    pm.expect(responseBody.updatedBy).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"updatedDate: !null\", function(){\r",
											"    pm.expect(responseBody.updatedDate).to.not.be.null;\r",
											"    pm.expect(responseBody.updatedDate).to.have.lengthOf.above(0);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"DANA-89\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders/77ab2c46acaa4da359da08da63e60401",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"77ab2c46acaa4da359da08da63e60401"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update folder - 400 Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders/77ab2c46acaa4da359da08da63e60401",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"77ab2c46acaa4da359da08da63e60401"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update folder - Invalid ID- 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 404 code is returned\r",
											"pm.test(\"Status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"good\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders/77ab2c46acaa4da359da08d60401",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"77ab2c46acaa4da359da08d60401"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update folder - Empty body - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"\",\r\n    \"value\": \"\",\r\n    \"path\": \"\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders/77ab2c46acaa4da359da08da63e60401",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"77ab2c46acaa4da359da08da63e60401"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update folder -No path - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"\",\r\n    \"path\": \"\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders/77ab2c46acaa4da359da08da63e60401",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"77ab2c46acaa4da359da08da63e60401"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update folder -Invalid name - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"@@##@\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders/77ab2c46acaa4da359da08da63e60401",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"77ab2c46acaa4da359da08da63e60401"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update folder - Folder name already exist - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"Root 1\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders/77ab2c46acaa4da359da08da63e60401",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"77ab2c46acaa4da359da08da63e60401"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update folder -Invalid folder lenght - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"lzqtEZVyKNLqMhracncJiqtuZBHuuRTMPVPplenKrHbpOYZYMaSlUauqqUNLttqFoxxAmjjwuCLmdhAxeomUerFQcnEOhMOmCpNwceWeUWosnFkQmYOrdeJrTNYOeuFMyVfgjwkcOfIkErLHsBtLzCQZCowbVaAkSymGQuvrppLGoRIMNNTQJArraUFygVPOSEyMfkwhiCovTrFIhkTLXXSrQxeAIwYDiqqKjLUIMVinTEPb\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders/77ab2c46acaa4da359da08da63e60401",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"77ab2c46acaa4da359da08da63e60401"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update folder - 404 folder not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 404 code is returned\r",
											"pm.test(\"Status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"test\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders/9314B068-95AC-4DC3-26B5-08DA63217B54",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"9314B068-95AC-4DC3-26B5-08DA63217B54"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update folder - 500 unexpected server error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"DANA\",\r\n    \"path\": \"/dana\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders/77ab2c46acaa4da359da08da63e60401",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"77ab2c46acaa4da359da08da63e60401"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update folder - Invalid operation - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"rep\",\r\n    \"value\": \"DANA\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders/77ab2c46acaa4da359da08da63e60401",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"77ab2c46acaa4da359da08da63e60401"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update folder - Invalid operation - 400 (path-Id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"DANA\",\r\n    \"path\": \"/Id\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/folders/77ab2c46acaa4da359da08da63e60401",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"folders",
										"77ab2c46acaa4da359da08da63e60401"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AB-6775 - View files list",
					"item": [
						{
							"name": "View Documents - 200 success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies correct code is returned\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/documents?folderId=532C4EAA-D706-4068-B805-F942BC7B2001",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents"
									],
									"query": [
										{
											"key": "folderId",
											"value": "532C4EAA-D706-4068-B805-F942BC7B2001"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "View Documents - 200 success - Output fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"name not null or empty\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.isSaved).to.eql(true);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/documents?folderId=532C4EAA-D706-4068-B805-F942BC7B2002",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents"
									],
									"query": [
										{
											"key": "folderId",
											"value": "532C4EAA-D706-4068-B805-F942BC7B2002"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "View Documents - 404 Parent folder not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 404 code is returned\r",
											"pm.test(\"Status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/documents?folderId=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents"
									],
									"query": [
										{
											"key": "folderId",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "View Documents -400 -  Missing folder ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/documents?folderId=",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents"
									],
									"query": [
										{
											"key": "folderId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "View Documents -400 -  Invalid folder ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/documents?folderId=532C4EAA---B805-F942BC7B2001",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents"
									],
									"query": [
										{
											"key": "folderId",
											"value": "532C4EAA---B805-F942BC7B2001"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "View Documents -400 -  Invalid folder ID characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/documents?folderId=ldllld#@#@!$122",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents"
									],
									"query": [
										{
											"key": "folderId",
											"value": "ldllld"
										}
									],
									"hash": "@#@!$122"
								}
							},
							"response": []
						},
						{
							"name": "View Documents - 500 Unexpected Internal error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 500 code is returned\r",
											"pm.test(\"Status code is 500\", function(){\r",
											"    pm.response.to.have.status(500)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURLC}}/documents?folderId=3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents"
									],
									"query": [
										{
											"key": "folderId",
											"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AB-5016 - Upload files",
					"item": [
						{
							"name": "Upload file - 200 success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies correct code is returned\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/dcotofana/OneDrive - ENDAVA/Desktop/Citation/upload files - BE 2.PNG"
										},
										{
											"key": "FolderId",
											"value": "1B2A048B-DF6B-4D82-28A8-08DA6F372301",
											"type": "text"
										},
										{
											"key": "Name",
											"value": "file test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://unitydocapidev.azurewebsites.net/documents",
									"protocol": "https",
									"host": [
										"unitydocapidev",
										"azurewebsites",
										"net"
									],
									"path": [
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "different types-extensions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies correct code is returned\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/dcotofana/OneDrive - ENDAVA/Desktop/Citation/upload files - BE 2.PNG"
										},
										{
											"key": "FolderId",
											"value": "1B2A048B-DF6B-4D82-28A8-08DA6F372301",
											"type": "text"
										},
										{
											"key": "Name",
											"value": "file test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://unitydocapidev.azurewebsites.net/documents",
									"protocol": "https",
									"host": [
										"unitydocapidev",
										"azurewebsites",
										"net"
									],
									"path": [
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload file - 200 success - Output fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"name: !null or empty\", function(){\r",
											"    pm.expect(responseBody.name).to.not.be.null;\r",
											"    pm.expect(responseBody.name).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"folderId: !null or empty\", function(){\r",
											"    pm.expect(responseBody.folderId).to.not.be.null;\r",
											"    pm.expect(responseBody.folderId).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"extension: !null and right extention\", function(){\r",
											"    pm.expect(responseBody.extension).to.not.be.null;\r",
											"    pm.expect(responseBody.extension).to.eql(\".PNG\");\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"isSaved: !null and equal true\", function(){\r",
											"    pm.expect(responseBody.isSaved).to.not.be.null;\r",
											"    pm.expect(responseBody.isSaved).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"id: !null or empty\", function(){\r",
											"    pm.expect(responseBody.id).to.not.be.null;\r",
											"    pm.expect(responseBody.id).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"createdBy: !null or empty\", function(){\r",
											"    pm.expect(responseBody.createdBy).to.not.be.null;\r",
											"    pm.expect(responseBody.createdBy).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"createdDate: !null or empty\", function(){\r",
											"    pm.expect(responseBody.createdDate).to.not.be.null;\r",
											"    pm.expect(responseBody.createdDate).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"updatedBy: !null or empty\", function(){\r",
											"    pm.expect(responseBody.updatedBy).to.not.be.null;\r",
											"    pm.expect(responseBody.updatedBy).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"updatedDate: !null or empty\", function(){\r",
											"    pm.expect(responseBody.updatedDate).to.not.be.null;\r",
											"    pm.expect(responseBody.updatedDate).to.have.lengthOf.above(0);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/dcotofana/OneDrive - ENDAVA/Desktop/Citation/upload files - BE.PNG"
										},
										{
											"key": "FolderId",
											"value": "1B2A048B-DF6B-4D82-28A8-08DA6F372301",
											"type": "text"
										},
										{
											"key": "Name",
											"value": "file test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://unitydocapidev.azurewebsites.net/documents",
									"protocol": "https",
									"host": [
										"unitydocapidev",
										"azurewebsites",
										"net"
									],
									"path": [
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload file - 404 - Folder does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 404 code is returned\r",
											"pm.test(\"Status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/dcotofana/OneDrive - ENDAVA/Desktop/Citation/upload files - BE.PNG"
										},
										{
											"key": "FolderId",
											"value": "2BC9BEDE-B45C-442C-28A9-08DA6F372301",
											"type": "text"
										},
										{
											"key": "Name",
											"value": "file test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://unitydocapidev.azurewebsites.net/documents",
									"protocol": "https",
									"host": [
										"unitydocapidev",
										"azurewebsites",
										"net"
									],
									"path": [
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload file - 400 Bad request - invalid folderID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/dcotofana/OneDrive - ENDAVA/Desktop/Citation/confirmation msg displayed.PNG"
										},
										{
											"key": "FolderId",
											"value": "2BC9BEDE-B45C--28A9-08DA6F372301",
											"type": "text"
										},
										{
											"key": "Name",
											"value": "file test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://unitydocapidev.azurewebsites.net/documents",
									"protocol": "https",
									"host": [
										"unitydocapidev",
										"azurewebsites",
										"net"
									],
									"path": [
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload file - 400 Bad request - empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": []
										},
										{
											"key": "FolderId",
											"value": "",
											"type": "text"
										},
										{
											"key": "Name",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://unitydocapidev.azurewebsites.net/documents",
									"protocol": "https",
									"host": [
										"unitydocapidev",
										"azurewebsites",
										"net"
									],
									"path": [
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload file - 400 Bad request - missing parameters value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": []
										},
										{
											"key": "FolderId",
											"value": "1B2A048B-DF6B-4D82-28A8-08DA6F372301",
											"type": "text"
										},
										{
											"key": "Name",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://unitydocapidev.azurewebsites.net/documents",
									"protocol": "https",
									"host": [
										"unitydocapidev",
										"azurewebsites",
										"net"
									],
									"path": [
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload file - 500 Internal server error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 500 code is returned\r",
											"pm.test(\"Status code is 500\", function(){\r",
											"    pm.response.to.have.status(500)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/dcotofana/OneDrive - ENDAVA/Desktop/Citation/upload files - BE.PNG"
										},
										{
											"key": "FolderId",
											"value": "2BC9BEDE-B45C-442C-28A9-08DA6F372301",
											"type": "text"
										},
										{
											"key": "Name",
											"value": "file test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://unitydocapidev.azurewebsites.net/documents",
									"protocol": "https",
									"host": [
										"unitydocapidev",
										"azurewebsites",
										"net"
									],
									"path": [
										"documents"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AB-5016 - Update files",
					"item": [
						{
							"name": "Update document - 200 success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies correct code is returned\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"Test Document\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/documents/98E4E84E-57B1-42CA-96EA-AAAF696BBF95",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents",
										"98E4E84E-57B1-42CA-96EA-AAAF696BBF95"
									]
								}
							},
							"response": []
						},
						{
							"name": "extension",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies correct code is returned\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"Test Document\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/documents/98E4E84E-57B1-42CA-96EA-AAAF696BBF95",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents",
										"98E4E84E-57B1-42CA-96EA-AAAF696BBF95"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document - 200 success - Output fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"name: !null or empty\", function(){\r",
											"    pm.expect(responseBody.name).to.not.be.null;\r",
											"    pm.expect(responseBody.name).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"folderId: !null or empty\", function(){\r",
											"    pm.expect(responseBody.folderId).to.not.be.null;\r",
											"    pm.expect(responseBody.folderId).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"extension: !null and right extention\", function(){\r",
											"    pm.expect(responseBody.extension).to.not.be.null;\r",
											"    pm.expect(responseBody.extension).to.eql(\"pdf\");\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"id: !null or empty\", function(){\r",
											"    pm.expect(responseBody.id).to.not.be.null;\r",
											"    pm.expect(responseBody.id).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"createdBy: !null or empty\", function(){\r",
											"    pm.expect(responseBody.createdBy).to.not.be.null;\r",
											"    pm.expect(responseBody.createdBy).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"createdDate: !null or empty\", function(){\r",
											"    pm.expect(responseBody.createdDate).to.not.be.null;\r",
											"    pm.expect(responseBody.createdDate).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"updatedBy: !null or empty\", function(){\r",
											"    pm.expect(responseBody.updatedBy).to.not.be.null;\r",
											"    pm.expect(responseBody.updatedBy).to.have.lengthOf.above(0);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"updatedDate: !null or empty\", function(){\r",
											"    pm.expect(responseBody.updatedDate).to.not.be.null;\r",
											"    pm.expect(responseBody.updatedDate).to.have.lengthOf.above(0);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"Test Document\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/documents/98E4E84E-57B1-42CA-96EA-AAAF696BBF95",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents",
										"98E4E84E-57B1-42CA-96EA-AAAF696BBF95"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document - 400 Invalid document name lenght",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies correct code is returned\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"lzqtEZVyKNLqMhracncJiqtuZBHuuRTMPVPplenKrHbpOYZYMaSlUauqqUNLttqFoxxAmjjwuCLmdhAxeomUerFQcnEOhMOmCpNwceWeUWosnFkQmYOrdeJrTNYOeuFMyVfgjwkcOfIkErLHsBtLzCQZCowbVaAkSymGQuvrppLGoRIMNNTQJArraUFygVPOSEyMfkwhiCovTrFIhkTLXXSrQxeAIwYDiqqKjLUIMVinTEPb\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/documents/98E4E84E-57B1-42CA-96EA-AAAF696BBF95",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents",
										"98E4E84E-57B1-42CA-96EA-AAAF696BBF95"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document - 400 - Invalid operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"rep\",\r\n    \"value\": \"Test Document\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/documents/98E4E84E-57B1-42CA-96EA-AAAF696BBF95",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents",
										"98E4E84E-57B1-42CA-96EA-AAAF696BBF95"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document -400 - Invalid operation (path- Id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies correct code is returned\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.json\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"Test Document\",\r\n    \"path\": \"/Id\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/documents/98E4E84E-57B1-42CA-96EA-AAAF696BBF95",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents",
										"98E4E84E-57B1-42CA-96EA-AAAF696BBF95"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document - 400 Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/documents/98E4E84E-57B1-42CA-96EA-AAAF696BBF95",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents",
										"98E4E84E-57B1-42CA-96EA-AAAF696BBF95"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document - 404 - Document not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 404 code is returned\r",
											"pm.test(\"Status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/documents/98E4E84E-57B1-42CA-96EA-AAAF696BBF96",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents",
										"98E4E84E-57B1-42CA-96EA-AAAF696BBF96"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document - 400 - Invalid Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"$#$@$2\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/documents/98E4E84E-57B1-42CA-96EA-AAAF696BBF95",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents",
										"98E4E84E-57B1-42CA-96EA-AAAF696BBF95"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document - 400- No path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"\",\r\n    \"path\": \"\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/documents/98E4E84E-57B1-42CA-96EA-AAAF696BBF95",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents",
										"98E4E84E-57B1-42CA-96EA-AAAF696BBF95"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document - 400 - empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 400 code is returned\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"\",\r\n    \"value\": \"\",\r\n    \"path\": \"\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/documents/98E4E84E-57B1-42CA-96EA-AAAF696BBF95",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents",
										"98E4E84E-57B1-42CA-96EA-AAAF696BBF95"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document - 404 Invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 404 code is returned\r",
											"pm.test(\"Status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/documents/98E4E84E-57B1-42CA-AAAF696BBF95",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents",
										"98E4E84E-57B1-42CA-AAAF696BBF95"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document - 500 Internal server error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verifies 500 code is returned\r",
											"pm.test(\"Status code is 500\", function(){\r",
											"    pm.response.to.have.status(500)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"op\": \"replace\",\r\n    \"value\": \"\",\r\n    \"path\": \"/Name\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLC}}/documents/98E4E84E-57B1-42CA-96EA-AAAF696BBF95",
									"host": [
										"{{baseURLC}}"
									],
									"path": [
										"documents",
										"98E4E84E-57B1-42CA-96EA-AAAF696BBF95"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}